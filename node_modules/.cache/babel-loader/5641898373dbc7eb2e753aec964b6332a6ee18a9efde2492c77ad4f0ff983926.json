{"ast":null,"code":"export class TextToSpeechService{static async convertTextToSpeech(text){try{console.log('Converting text to speech:',text);// URL encode the text parameter\nconst encodedText=encodeURIComponent(text);const url=`${this.API_BASE_URL}/api/text-to-speech?text=${encodedText}`;const response=await fetch(url,{method:'GET',headers:{'Accept':'audio/*'}});if(!response.ok){throw new Error(`TTS API request failed: ${response.status} ${response.statusText}`);}// Get the audio data as blob\nconst audioBlob=await response.blob();console.log('TTS conversion successful, audio blob size:',audioBlob.size);return{success:true,audioBlob:audioBlob};}catch(error){console.error('Text-to-speech conversion failed:',error);return{success:false,error:error instanceof Error?error.message:'Unknown TTS error'};}}static stopCurrentAudio(){if(this.currentAudio){console.log('Stopping current audio playback');this.currentAudio.pause();this.currentAudio.currentTime=0;this.currentAudio=null;}if(this.currentAudioUrl){URL.revokeObjectURL(this.currentAudioUrl);this.currentAudioUrl=null;}}static async playAudio(audioBlob){return new Promise((resolve,reject)=>{try{// Stop any currently playing audio first\nthis.stopCurrentAudio();// Create audio URL from blob\nconst audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);// Store references for management\nthis.currentAudio=audio;this.currentAudioUrl=audioUrl;audio.onended=()=>{console.log('Audio playback completed');// Clean up the object URL\nURL.revokeObjectURL(audioUrl);this.currentAudio=null;this.currentAudioUrl=null;resolve();};audio.onerror=error=>{console.error('Audio playback error:',error);URL.revokeObjectURL(audioUrl);this.currentAudio=null;this.currentAudioUrl=null;reject(new Error('Audio playback failed'));};// Handle manual pause/stop\naudio.onpause=()=>{if(audio.currentTime===0){// Audio was stopped, not just paused\nURL.revokeObjectURL(audioUrl);this.currentAudio=null;this.currentAudioUrl=null;resolve();}};// Start playing\nconsole.log('Starting new audio playback');audio.play().catch(reject);}catch(error){console.error('Failed to create audio from blob:',error);reject(error);}});}static async convertAndPlay(text){// Stop any currently playing audio before starting new conversion\nthis.stopCurrentAudio();const result=await this.convertTextToSpeech(text);if(result.success&&result.audioBlob){await this.playAudio(result.audioBlob);}else{throw new Error(result.error||'TTS conversion failed');}}static isAudioPlaying(){return this.currentAudio!==null&&!this.currentAudio.paused;}}TextToSpeechService.API_BASE_URL='http://localhost:8080';TextToSpeechService.currentAudio=null;TextToSpeechService.currentAudioUrl=null;","map":{"version":3,"names":["TextToSpeechService","convertTextToSpeech","text","console","log","encodedText","encodeURIComponent","url","API_BASE_URL","response","fetch","method","headers","ok","Error","status","statusText","audioBlob","blob","size","success","error","message","stopCurrentAudio","currentAudio","pause","currentTime","currentAudioUrl","URL","revokeObjectURL","playAudio","Promise","resolve","reject","audioUrl","createObjectURL","audio","Audio","onended","onerror","onpause","play","catch","convertAndPlay","result","isAudioPlaying","paused"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/services/textToSpeechService.ts"],"sourcesContent":["export interface TTSResponse {\n  success: boolean;\n  audioBlob?: Blob;\n  error?: string;\n}\n\nexport class TextToSpeechService {\n  private static readonly API_BASE_URL = 'http://localhost:8080';\n  private static currentAudio: HTMLAudioElement | null = null;\n  private static currentAudioUrl: string | null = null;\n\n  static async convertTextToSpeech(text: string): Promise<TTSResponse> {\n    try {\n      console.log('Converting text to speech:', text);\n      \n      // URL encode the text parameter\n      const encodedText = encodeURIComponent(text);\n      const url = `${this.API_BASE_URL}/api/text-to-speech?text=${encodedText}`;\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'audio/*',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`TTS API request failed: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the audio data as blob\n      const audioBlob = await response.blob();\n      \n      console.log('TTS conversion successful, audio blob size:', audioBlob.size);\n      \n      return {\n        success: true,\n        audioBlob: audioBlob,\n      };\n      \n    } catch (error) {\n      console.error('Text-to-speech conversion failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown TTS error',\n      };\n    }\n  }\n\n  static stopCurrentAudio(): void {\n    if (this.currentAudio) {\n      console.log('Stopping current audio playback');\n      this.currentAudio.pause();\n      this.currentAudio.currentTime = 0;\n      this.currentAudio = null;\n    }\n    \n    if (this.currentAudioUrl) {\n      URL.revokeObjectURL(this.currentAudioUrl);\n      this.currentAudioUrl = null;\n    }\n  }\n\n  static async playAudio(audioBlob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Stop any currently playing audio first\n        this.stopCurrentAudio();\n        \n        // Create audio URL from blob\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        \n        // Store references for management\n        this.currentAudio = audio;\n        this.currentAudioUrl = audioUrl;\n        \n        audio.onended = () => {\n          console.log('Audio playback completed');\n          // Clean up the object URL\n          URL.revokeObjectURL(audioUrl);\n          this.currentAudio = null;\n          this.currentAudioUrl = null;\n          resolve();\n        };\n        \n        audio.onerror = (error) => {\n          console.error('Audio playback error:', error);\n          URL.revokeObjectURL(audioUrl);\n          this.currentAudio = null;\n          this.currentAudioUrl = null;\n          reject(new Error('Audio playback failed'));\n        };\n        \n        // Handle manual pause/stop\n        audio.onpause = () => {\n          if (audio.currentTime === 0) {\n            // Audio was stopped, not just paused\n            URL.revokeObjectURL(audioUrl);\n            this.currentAudio = null;\n            this.currentAudioUrl = null;\n            resolve();\n          }\n        };\n        \n        // Start playing\n        console.log('Starting new audio playback');\n        audio.play().catch(reject);\n        \n      } catch (error) {\n        console.error('Failed to create audio from blob:', error);\n        reject(error);\n      }\n    });\n  }\n\n  static async convertAndPlay(text: string): Promise<void> {\n    // Stop any currently playing audio before starting new conversion\n    this.stopCurrentAudio();\n    \n    const result = await this.convertTextToSpeech(text);\n    \n    if (result.success && result.audioBlob) {\n      await this.playAudio(result.audioBlob);\n    } else {\n      throw new Error(result.error || 'TTS conversion failed');\n    }\n  }\n  \n  static isAudioPlaying(): boolean {\n    return this.currentAudio !== null && !this.currentAudio.paused;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}