{"ast":null,"code":"var _jsxFileName = \"/Users/jiginvp/react/AICompetition/empathy-ai/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport AudioRecorder from './components/AudioRecorder';\nimport AudioPlayer from './components/AudioPlayer';\nimport TranscriptionHistory from './components/TranscriptionHistory';\nimport HelplinePopup from './components/HelplinePopup';\nimport { TextToSpeechService } from './services/textToSpeechService';\n\n// Generate UUID function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateUUID = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nfunction App() {\n  _s();\n  const [isProcessing] = useState(false);\n  const [currentResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [conversations, setConversations] = useState([]);\n  const [currentConversationUuid, setCurrentConversationUuid] = useState(null);\n  const [showHelplinePopup, setShowHelplinePopup] = useState(false);\n  const handleRecordingComplete = async audioBlob => {\n    // This is now handled by WebSocket, keeping for compatibility\n    console.log('Recording complete - WebSocket mode');\n  };\n  const handleWebSocketMessage = async message => {\n    console.log('Received WebSocket message:', message);\n    if (message.type === 'transcript' && message.transcript && message.reply) {\n      // Add user message with transcript\n      const userMessage = {\n        id: Date.now().toString(),\n        timestamp: new Date(),\n        type: 'user',\n        content: message.transcript\n      };\n\n      // Add AI response message\n      const aiMessage = {\n        id: (Date.now() + 1).toString(),\n        timestamp: new Date(Date.now() + 100),\n        type: 'ai',\n        content: message.reply,\n        needHumanIntervention: message.needsHumanIntervention || false\n      };\n      setConversations(prev => {\n        const updatedConversations = [...prev];\n        if (updatedConversations.length > 0) {\n          const currentMessages = [...updatedConversations[0].messages, userMessage, aiMessage];\n          updatedConversations[0] = {\n            ...updatedConversations[0],\n            messages: currentMessages\n          };\n        }\n        return updatedConversations;\n      });\n\n      // Check if human intervention is needed and show popup\n      if (message.needsHumanIntervention) {\n        console.log('Human intervention needed - showing helpline popup');\n        setShowHelplinePopup(true);\n      }\n\n      // Convert AI reply to speech and play it (this will automatically stop any current audio)\n      try {\n        console.log('Converting AI reply to speech:', message.reply);\n        console.log('Previous audio will be stopped if playing');\n        await TextToSpeechService.convertAndPlay(message.reply);\n        console.log('TTS playback completed');\n      } catch (ttsError) {\n        console.error('TTS failed:', ttsError);\n        // Don't show TTS errors to user as they're not critical\n      }\n    }\n    if (message.error) {\n      setError(message.error);\n    }\n  };\n  const handleWebSocketError = error => {\n    console.error('WebSocket error:', error);\n    setError(error);\n  };\n  const handleStartNewConversation = () => {\n    const uuid = generateUUID();\n    setCurrentConversationUuid(uuid);\n\n    // Create new conversation\n    const newConversation = {\n      id: uuid,\n      messages: [],\n      startTime: new Date()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    console.log('Started new conversation with UUID:', uuid);\n    return uuid;\n  };\n  const handleEndConversation = () => {\n    setCurrentConversationUuid(null);\n    // Stop any playing TTS audio when conversation ends\n    TextToSpeechService.stopCurrentAudio();\n    console.log('Ended conversation and stopped any playing audio');\n  };\n  const handleCloseHelplinePopup = () => {\n    setShowHelplinePopup(false);\n  };\n  const handlePlaybackComplete = () => {\n    // Optional: Add any cleanup or next steps after audio playback\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Empathy AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A safe space to share your thoughts and feelings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"support-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"You're Not Alone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is a judgment-free space where you can express yourself freely. Our AI companion is here to listen with empathy and provide supportive guidance.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recording-section\",\n          children: [/*#__PURE__*/_jsxDEV(AudioRecorder, {\n            onRecordingComplete: handleRecordingComplete,\n            onProcessingComplete: () => {} // Empty callback as auto-resume is handled internally\n            ,\n            isProcessing: isProcessing,\n            conversationUuid: currentConversationUuid,\n            onStartNewConversation: handleStartNewConversation,\n            onEndConversation: handleEndConversation,\n            onWebSocketMessage: handleWebSocketMessage,\n            onWebSocketError: handleWebSocketError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u26A0\\uFE0F \", error]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Please try again or check your connection.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this), currentResponse && currentResponse.success && /*#__PURE__*/_jsxDEV(AudioPlayer, {\n            audioUrl: currentResponse.audioUrl || null,\n            message: currentResponse.message,\n            onPlaybackComplete: handlePlaybackComplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TranscriptionHistory, {\n          conversations: conversations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HelplinePopup, {\n      isOpen: showHelplinePopup,\n      onClose: handleCloseHelplinePopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8kn/fJ0urHJv/qwEJha77HpHq/I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AudioRecorder","AudioPlayer","TranscriptionHistory","HelplinePopup","TextToSpeechService","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","App","_s","isProcessing","currentResponse","error","setError","conversations","setConversations","currentConversationUuid","setCurrentConversationUuid","showHelplinePopup","setShowHelplinePopup","handleRecordingComplete","audioBlob","console","log","handleWebSocketMessage","message","type","transcript","reply","userMessage","id","Date","now","timestamp","content","aiMessage","needHumanIntervention","needsHumanIntervention","prev","updatedConversations","length","currentMessages","messages","convertAndPlay","ttsError","handleWebSocketError","handleStartNewConversation","uuid","newConversation","startTime","handleEndConversation","stopCurrentAudio","handleCloseHelplinePopup","handlePlaybackComplete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onRecordingComplete","onProcessingComplete","conversationUuid","onStartNewConversation","onEndConversation","onWebSocketMessage","onWebSocketError","success","audioUrl","onPlaybackComplete","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AudioRecorder from './components/AudioRecorder';\nimport AudioPlayer from './components/AudioPlayer';\nimport TranscriptionHistory, { Conversation, ChatMessage } from './components/TranscriptionHistory';\nimport HelplinePopup from './components/HelplinePopup';\nimport { WebSocketMessage } from './services/webSocketService';\nimport { TextToSpeechService } from './services/textToSpeechService';\n\n// Generate UUID function\nconst generateUUID = (): string => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n\nfunction App() {\n  const [isProcessing] = useState(false);\n  const [currentResponse] = useState<any | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversationUuid, setCurrentConversationUuid] = useState<string | null>(null);\n  const [showHelplinePopup, setShowHelplinePopup] = useState<boolean>(false);\n\n  const handleRecordingComplete = async (audioBlob: Blob) => {\n    // This is now handled by WebSocket, keeping for compatibility\n    console.log('Recording complete - WebSocket mode');\n  };\n\n  const handleWebSocketMessage = async (message: WebSocketMessage) => {\n    console.log('Received WebSocket message:', message);\n    \n    if (message.type === 'transcript' && message.transcript && message.reply) {\n      // Add user message with transcript\n      const userMessage: ChatMessage = {\n        id: Date.now().toString(),\n        timestamp: new Date(),\n        type: 'user',\n        content: message.transcript,\n      };\n      \n      // Add AI response message\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        timestamp: new Date(Date.now() + 100),\n        type: 'ai',\n        content: message.reply,\n        needHumanIntervention: message.needsHumanIntervention || false,\n      };\n      \n      setConversations(prev => {\n        const updatedConversations = [...prev];\n        if (updatedConversations.length > 0) {\n          const currentMessages = [...updatedConversations[0].messages, userMessage, aiMessage];\n          updatedConversations[0] = {\n            ...updatedConversations[0],\n            messages: currentMessages\n          };\n        }\n        return updatedConversations;\n      });\n\n      // Check if human intervention is needed and show popup\n      if (message.needsHumanIntervention) {\n        console.log('Human intervention needed - showing helpline popup');\n        setShowHelplinePopup(true);\n      }\n\n      // Convert AI reply to speech and play it (this will automatically stop any current audio)\n      try {\n        console.log('Converting AI reply to speech:', message.reply);\n        console.log('Previous audio will be stopped if playing');\n        await TextToSpeechService.convertAndPlay(message.reply);\n        console.log('TTS playback completed');\n      } catch (ttsError) {\n        console.error('TTS failed:', ttsError);\n        // Don't show TTS errors to user as they're not critical\n      }\n    }\n    \n    if (message.error) {\n      setError(message.error);\n    }\n  };\n  \n  const handleWebSocketError = (error: string) => {\n    console.error('WebSocket error:', error);\n    setError(error);\n  };\n\n  const handleStartNewConversation = (): string => {\n    const uuid = generateUUID();\n    setCurrentConversationUuid(uuid);\n    \n    // Create new conversation\n    const newConversation: Conversation = {\n      id: uuid,\n      messages: [],\n      startTime: new Date(),\n    };\n    \n    setConversations(prev => [newConversation, ...prev]);\n    console.log('Started new conversation with UUID:', uuid);\n    return uuid;\n  };\n\n  const handleEndConversation = () => {\n    setCurrentConversationUuid(null);\n    // Stop any playing TTS audio when conversation ends\n    TextToSpeechService.stopCurrentAudio();\n    console.log('Ended conversation and stopped any playing audio');\n  };\n\n  const handleCloseHelplinePopup = () => {\n    setShowHelplinePopup(false);\n  };\n\n  const handlePlaybackComplete = () => {\n    // Optional: Add any cleanup or next steps after audio playback\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1>Empathy AI</h1>\n        <p>A safe space to share your thoughts and feelings</p>\n      </header>\n\n      <main className=\"app-main\">\n        <div className=\"support-message\">\n          <h2>You're Not Alone</h2>\n          <p>\n            This is a judgment-free space where you can express yourself freely. \n            Our AI companion is here to listen with empathy and provide supportive guidance.\n          </p>\n        </div>\n\n        <div className=\"main-content\">\n          <div className=\"recording-section\">\n            <AudioRecorder \n              onRecordingComplete={handleRecordingComplete}\n              onProcessingComplete={() => {}} // Empty callback as auto-resume is handled internally\n              isProcessing={isProcessing}\n              conversationUuid={currentConversationUuid}\n              onStartNewConversation={handleStartNewConversation}\n              onEndConversation={handleEndConversation}\n              onWebSocketMessage={handleWebSocketMessage}\n              onWebSocketError={handleWebSocketError}\n            />\n\n            {error && (\n              <div className=\"error-message\">\n                <p>⚠️ {error}</p>\n                <small>Please try again or check your connection.</small>\n              </div>\n            )}\n\n            {currentResponse && currentResponse.success && (\n              <AudioPlayer\n                audioUrl={currentResponse.audioUrl || null}\n                message={currentResponse.message}\n                onPlaybackComplete={handlePlaybackComplete}\n              />\n            )}\n          </div>\n\n          <TranscriptionHistory conversations={conversations} />\n        </div>\n\n      </main>\n\n      <HelplinePopup \n        isOpen={showHelplinePopup} \n        onClose={handleCloseHelplinePopup} \n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}