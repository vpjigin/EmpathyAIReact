{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8080';export class AudioService{static async sendAudioToServer(audioBlob,conversationUuid){try{console.log('Sending audio blob:',{size:audioBlob.size,type:audioBlob.type});if(audioBlob.size===0){throw new Error('Audio blob is empty');}const formData=new FormData();formData.append('file',audioBlob,'recording.webm');formData.append('uuid',conversationUuid);const response=await fetch(`${API_BASE_URL}/api/audio`,{method:'POST',body:formData,headers:{'Accept':'application/json'}});if(!response.ok){throw new Error(`Server responded with status: ${response.status}`);}const result=await response.json();if(result.status==='success'){return{success:true,status:result.status,message:result.message,filename:result.filename,transcription:result.transcription,needHumanIntervention:result.needHumanIntervention,transcriptionReply:result.transcriptionReply};}else{return{success:false,error:result.error||'Failed to transcribe audio'};}}catch(error){console.error('Error communicating with server:',error);return{success:false,error:error.message||'Failed to connect to server. Please check your connection.'};}}static async downloadAudio(audioUrl){try{const response=await fetch(audioUrl);if(!response.ok){throw new Error(`Failed to download audio: ${response.status}`);}return await response.blob();}catch(error){console.error('Error downloading audio:',error);return null;}}static createAudioUrl(audioBlob){return URL.createObjectURL(audioBlob);}static releaseAudioUrl(audioUrl){URL.revokeObjectURL(audioUrl);}}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AudioService","sendAudioToServer","audioBlob","conversationUuid","console","log","size","type","Error","formData","FormData","append","response","fetch","method","body","headers","ok","status","result","json","success","message","filename","transcription","needHumanIntervention","transcriptionReply","error","downloadAudio","audioUrl","blob","createAudioUrl","URL","createObjectURL","releaseAudioUrl","revokeObjectURL"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/services/audioService.ts"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nexport interface AudioResponse {\n  success: boolean;\n  audioUrl?: string;\n  message?: string;\n  error?: string;\n  status?: string;\n  filename?: string;\n  transcription?: string;\n  needHumanIntervention?: boolean;\n  transcriptionReply?: string;\n}\n\nexport class AudioService {\n  static async sendAudioToServer(audioBlob: Blob, conversationUuid: string): Promise<AudioResponse> {\n    try {\n      console.log('Sending audio blob:', {\n        size: audioBlob.size,\n        type: audioBlob.type\n      });\n      \n      if (audioBlob.size === 0) {\n        throw new Error('Audio blob is empty');\n      }\n      \n      const formData = new FormData();\n      formData.append('file', audioBlob, 'recording.webm');\n      formData.append('uuid', conversationUuid);\n      \n      const response = await fetch(`${API_BASE_URL}/api/audio`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      if (result.status === 'success') {\n        return {\n          success: true,\n          status: result.status,\n          message: result.message,\n          filename: result.filename,\n          transcription: result.transcription,\n          needHumanIntervention: result.needHumanIntervention,\n          transcriptionReply: result.transcriptionReply,\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error || 'Failed to transcribe audio',\n        };\n      }\n    } catch (error: any) {\n      console.error('Error communicating with server:', error);\n      \n      return {\n        success: false,\n        error: error.message || 'Failed to connect to server. Please check your connection.',\n      };\n    }\n  }\n\n  static async downloadAudio(audioUrl: string): Promise<Blob | null> {\n    try {\n      const response = await fetch(audioUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to download audio: ${response.status}`);\n      }\n      return await response.blob();\n    } catch (error) {\n      console.error('Error downloading audio:', error);\n      return null;\n    }\n  }\n\n  static createAudioUrl(audioBlob: Blob): string {\n    return URL.createObjectURL(audioBlob);\n  }\n\n  static releaseAudioUrl(audioUrl: string): void {\n    URL.revokeObjectURL(audioUrl);\n  }\n}"],"mappings":"AAAA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAc7E,MAAO,MAAM,CAAAC,YAAa,CACxB,YAAa,CAAAC,iBAAiBA,CAACC,SAAe,CAAEC,gBAAwB,CAA0B,CAChG,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAE,CACjCC,IAAI,CAAEJ,SAAS,CAACI,IAAI,CACpBC,IAAI,CAAEL,SAAS,CAACK,IAClB,CAAC,CAAC,CAEF,GAAIL,SAAS,CAACI,IAAI,GAAK,CAAC,CAAE,CACxB,KAAM,IAAI,CAAAE,KAAK,CAAC,qBAAqB,CAAC,CACxC,CAEA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAET,SAAS,CAAE,gBAAgB,CAAC,CACpDO,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAER,gBAAgB,CAAC,CAEzC,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGjB,YAAY,YAAY,CAAE,CACxDkB,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QAAQ,CACdO,OAAO,CAAE,CACP,QAAQ,CAAE,kBACZ,CACF,CAAC,CAAC,CAEF,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAT,KAAK,CAAC,iCAAiCI,QAAQ,CAACM,MAAM,EAAE,CAAC,CACrE,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAEpC,GAAID,MAAM,CAACD,MAAM,GAAK,SAAS,CAAE,CAC/B,MAAO,CACLG,OAAO,CAAE,IAAI,CACbH,MAAM,CAAEC,MAAM,CAACD,MAAM,CACrBI,OAAO,CAAEH,MAAM,CAACG,OAAO,CACvBC,QAAQ,CAAEJ,MAAM,CAACI,QAAQ,CACzBC,aAAa,CAAEL,MAAM,CAACK,aAAa,CACnCC,qBAAqB,CAAEN,MAAM,CAACM,qBAAqB,CACnDC,kBAAkB,CAAEP,MAAM,CAACO,kBAC7B,CAAC,CACH,CAAC,IAAM,CACL,MAAO,CACLL,OAAO,CAAE,KAAK,CACdM,KAAK,CAAER,MAAM,CAACQ,KAAK,EAAI,4BACzB,CAAC,CACH,CACF,CAAE,MAAOA,KAAU,CAAE,CACnBvB,OAAO,CAACuB,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CAExD,MAAO,CACLN,OAAO,CAAE,KAAK,CACdM,KAAK,CAAEA,KAAK,CAACL,OAAO,EAAI,4DAC1B,CAAC,CACH,CACF,CAEA,YAAa,CAAAM,aAAaA,CAACC,QAAgB,CAAwB,CACjE,GAAI,CACF,KAAM,CAAAjB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACgB,QAAQ,CAAC,CACtC,GAAI,CAACjB,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAT,KAAK,CAAC,6BAA6BI,QAAQ,CAACM,MAAM,EAAE,CAAC,CACjE,CACA,MAAO,MAAM,CAAAN,QAAQ,CAACkB,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOH,KAAK,CAAE,CACdvB,OAAO,CAACuB,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,KAAI,CACb,CACF,CAEA,MAAO,CAAAI,cAAcA,CAAC7B,SAAe,CAAU,CAC7C,MAAO,CAAA8B,GAAG,CAACC,eAAe,CAAC/B,SAAS,CAAC,CACvC,CAEA,MAAO,CAAAgC,eAAeA,CAACL,QAAgB,CAAQ,CAC7CG,GAAG,CAACG,eAAe,CAACN,QAAQ,CAAC,CAC/B,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}