{"ast":null,"code":"export class WebSocketService{constructor(onTranscription,onError){this.ws=null;this.conversationUuid=null;this.onTranscription=null;this.onError=null;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectInterval=1000;this.onTranscription=onTranscription;this.onError=onError;}connect(conversationUuid){return new Promise((resolve,reject)=>{try{this.conversationUuid=conversationUuid;this.ws=new WebSocket('ws://localhost:8080/ws/audio-stream-native');this.ws.onopen=()=>{var _this$ws;console.log('WebSocket connected');this.reconnectAttempts=0;// Send session start message\nconst startMessage={type:\"start_streaming\",conversation_uuid:conversationUuid};(_this$ws=this.ws)===null||_this$ws===void 0?void 0:_this$ws.send(JSON.stringify(startMessage));console.log('Sent start streaming message:',startMessage);resolve();};this.ws.onmessage=event=>{try{const message=JSON.parse(event.data);console.log('Received WebSocket message:',message);if(this.onTranscription){this.onTranscription(message);}}catch(error){console.error('Error parsing WebSocket message:',error);if(this.onError){this.onError('Failed to parse server response');}}};this.ws.onerror=error=>{console.error('WebSocket error:',error);if(this.onError){this.onError(`WebSocket connection error. Make sure the server is running at ws://localhost:8080/ws/audio-stream-native`);}reject(new Error(`WebSocket connection failed. Server may not be running.`));};this.ws.onclose=event=>{console.log('WebSocket closed unexpectedly:',{code:event.code,reason:event.reason,wasClean:event.wasClean,timestamp:new Date().toISOString()});// Only reconnect if it wasn't a clean close (code 1000) and we haven't exceeded attempts\nif(event.code!==1000&&this.reconnectAttempts<this.maxReconnectAttempts){console.log(`WebSocket closed unexpectedly, attempting to reconnect... (${this.reconnectAttempts+1}/${this.maxReconnectAttempts})`);setTimeout(()=>{this.reconnectAttempts++;if(this.conversationUuid){console.log('Reconnecting to WebSocket...');this.connect(this.conversationUuid).catch(console.error);}},this.reconnectInterval);}else if(event.code===1000){console.log('WebSocket closed cleanly by user or server');}else{console.log('Max reconnection attempts reached, giving up');}};}catch(error){console.error('Failed to create WebSocket connection:',error);reject(error);}});}sendAudioData(audioData){if(this.ws&&this.ws.readyState===WebSocket.OPEN){this.ws.send(audioData);}else{console.warn('WebSocket not connected, cannot send audio data. State:',this.ws?this.ws.readyState:'null');// Log the WebSocket state for debugging\nif(this.ws){const states=['CONNECTING','OPEN','CLOSING','CLOSED'];console.warn('WebSocket state:',states[this.ws.readyState]||'UNKNOWN');}}}disconnect(){if(this.ws){this.ws.close(1000,'User initiated disconnect');this.ws=null;}this.conversationUuid=null;}isConnected(){return this.ws!==null&&this.ws.readyState===WebSocket.OPEN;}}","map":{"version":3,"names":["WebSocketService","constructor","onTranscription","onError","ws","conversationUuid","reconnectAttempts","maxReconnectAttempts","reconnectInterval","connect","Promise","resolve","reject","WebSocket","onopen","_this$ws","console","log","startMessage","type","conversation_uuid","send","JSON","stringify","onmessage","event","message","parse","data","error","onerror","Error","onclose","code","reason","wasClean","timestamp","Date","toISOString","setTimeout","catch","sendAudioData","audioData","readyState","OPEN","warn","states","disconnect","close","isConnected"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/services/webSocketService.ts"],"sourcesContent":["export interface WebSocketMessage {\n  type: string;\n  message?: string;\n  conversation_uuid?: string;\n  transcript?: string;\n  reply?: string;\n  needsHumanIntervention?: boolean;\n  error?: string;\n}\n\nexport class WebSocketService {\n  private ws: WebSocket | null = null;\n  private conversationUuid: string | null = null;\n  private onTranscription: ((message: WebSocketMessage) => void) | null = null;\n  private onError: ((error: string) => void) | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectInterval = 1000;\n\n  constructor(\n    onTranscription: (message: WebSocketMessage) => void,\n    onError: (error: string) => void\n  ) {\n    this.onTranscription = onTranscription;\n    this.onError = onError;\n  }\n\n  connect(conversationUuid: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.conversationUuid = conversationUuid;\n        this.ws = new WebSocket('ws://localhost:8080/ws/audio-stream-native');\n\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          \n          // Send session start message\n          const startMessage = {\n            type: \"start_streaming\",\n            conversation_uuid: conversationUuid\n          };\n          \n          this.ws?.send(JSON.stringify(startMessage));\n          console.log('Sent start streaming message:', startMessage);\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            console.log('Received WebSocket message:', message);\n            \n            if (this.onTranscription) {\n              this.onTranscription(message);\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n            if (this.onError) {\n              this.onError('Failed to parse server response');\n            }\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          if (this.onError) {\n            this.onError(`WebSocket connection error. Make sure the server is running at ws://localhost:8080/ws/audio-stream-native`);\n          }\n          reject(new Error(`WebSocket connection failed. Server may not be running.`));\n        };\n\n        this.ws.onclose = (event) => {\n          console.log('WebSocket closed unexpectedly:', {\n            code: event.code,\n            reason: event.reason,\n            wasClean: event.wasClean,\n            timestamp: new Date().toISOString()\n          });\n          \n          // Only reconnect if it wasn't a clean close (code 1000) and we haven't exceeded attempts\n          if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n            console.log(`WebSocket closed unexpectedly, attempting to reconnect... (${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);\n            setTimeout(() => {\n              this.reconnectAttempts++;\n              if (this.conversationUuid) {\n                console.log('Reconnecting to WebSocket...');\n                this.connect(this.conversationUuid).catch(console.error);\n              }\n            }, this.reconnectInterval);\n          } else if (event.code === 1000) {\n            console.log('WebSocket closed cleanly by user or server');\n          } else {\n            console.log('Max reconnection attempts reached, giving up');\n          }\n        };\n\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        reject(error);\n      }\n    });\n  }\n\n  sendAudioData(audioData: ArrayBuffer): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(audioData);\n    } else {\n      console.warn('WebSocket not connected, cannot send audio data. State:', \n        this.ws ? this.ws.readyState : 'null');\n      \n      // Log the WebSocket state for debugging\n      if (this.ws) {\n        const states = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\n        console.warn('WebSocket state:', states[this.ws.readyState] || 'UNKNOWN');\n      }\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close(1000, 'User initiated disconnect');\n      this.ws = null;\n    }\n    this.conversationUuid = null;\n  }\n\n  isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}