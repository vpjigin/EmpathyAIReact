{"ast":null,"code":"var _jsxFileName = \"/Users/jiginvp/react/AICompetition/empathy-ai/src/components/AudioRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport './AudioRecorder.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  onRecordingComplete,\n  isProcessing\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n  const silenceTimerRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const detectSilence = useCallback(() => {\n    if (!analyserRef.current) return;\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyserRef.current.getByteFrequencyData(dataArray);\n\n    // Calculate average volume\n    const average = dataArray.reduce((sum, value) => sum + value, 0) / bufferLength;\n    const silenceThreshold = 5; // Adjust this value to change sensitivity\n\n    if (average < silenceThreshold) {\n      // User is silent\n      if (!silenceTimerRef.current) {\n        silenceTimerRef.current = setTimeout(() => {\n          // Auto-stop recording after 1 second of silence\n          stopRecording();\n        }, 1000);\n      }\n    } else {\n      // User is speaking, cancel silence timer\n      if (silenceTimerRef.current) {\n        clearTimeout(silenceTimerRef.current);\n        silenceTimerRef.current = null;\n      }\n    }\n    animationFrameRef.current = requestAnimationFrame(detectSilence);\n  }, []);\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Set up audio analysis for silence detection\n      audioContextRef.current = new AudioContext();\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n      source.connect(analyserRef.current);\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(chunksRef.current, {\n          type: 'audio/webm;codecs=opus'\n        });\n        onRecordingComplete(audioBlob);\n        stream.getTracks().forEach(track => track.stop());\n\n        // Cleanup audio analysis\n        if (audioContextRef.current) {\n          audioContextRef.current.close();\n          audioContextRef.current = null;\n        }\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n          animationFrameRef.current = null;\n        }\n      };\n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n\n      // Start silence detection\n      detectSilence();\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      alert('Unable to access microphone. Please check your permissions.');\n    }\n  }, [onRecordingComplete, detectSilence]);\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n\n      // Clear all timers\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      if (silenceTimerRef.current) {\n        clearTimeout(silenceTimerRef.current);\n        silenceTimerRef.current = null;\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    }\n  }, [isRecording]);\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-status\",\n      children: isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Recording... \", formatTime(recordingTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-controls\",\n      children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button start\",\n        onClick: startRecording,\n        disabled: isProcessing,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"24\",\n          height: \"24\",\n          viewBox: \"0 0 24 24\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), isProcessing ? 'Processing...' : 'Start Recording']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button stop\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"24\",\n          height: \"24\",\n          viewBox: \"0 0 24 24\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"rect\", {\n            x: \"6\",\n            y: \"6\",\n            width: \"12\",\n            height: \"12\",\n            rx: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), \"Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"recording-hint\",\n      children: [!isRecording && !isProcessing && \"Press the button and share what's on your mind. You're not alone.\", isProcessing && \"Processing your message with care...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"cYHmVGzdJ4PVl1lID9+kFbzo+ZQ=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useCallback","jsxDEV","_jsxDEV","AudioRecorder","onRecordingComplete","isProcessing","_s","isRecording","setIsRecording","recordingTime","setRecordingTime","mediaRecorderRef","chunksRef","timerRef","silenceTimerRef","audioContextRef","analyserRef","animationFrameRef","detectSilence","current","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","average","reduce","sum","value","silenceThreshold","setTimeout","stopRecording","clearTimeout","requestAnimationFrame","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","getTracks","forEach","track","stop","close","cancelAnimationFrame","start","setInterval","prev","error","console","alert","clearInterval","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","width","height","viewBox","fill","cx","cy","r","x","y","rx","_c","$RefreshReg$"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/components/AudioRecorder.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport './AudioRecorder.css';\n\ninterface AudioRecorderProps {\n  onRecordingComplete: (audioBlob: Blob) => void;\n  isProcessing: boolean;\n}\n\nconst AudioRecorder: React.FC<AudioRecorderProps> = ({ onRecordingComplete, isProcessing }) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const chunksRef = useRef<Blob[]>([]);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const silenceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  const detectSilence = useCallback(() => {\n    if (!analyserRef.current) return;\n\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyserRef.current.getByteFrequencyData(dataArray);\n\n    // Calculate average volume\n    const average = dataArray.reduce((sum, value) => sum + value, 0) / bufferLength;\n    const silenceThreshold = 5; // Adjust this value to change sensitivity\n\n    if (average < silenceThreshold) {\n      // User is silent\n      if (!silenceTimerRef.current) {\n        silenceTimerRef.current = setTimeout(() => {\n          // Auto-stop recording after 1 second of silence\n          stopRecording();\n        }, 1000);\n      }\n    } else {\n      // User is speaking, cancel silence timer\n      if (silenceTimerRef.current) {\n        clearTimeout(silenceTimerRef.current);\n        silenceTimerRef.current = null;\n      }\n    }\n\n    animationFrameRef.current = requestAnimationFrame(detectSilence);\n  }, []);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n        }\n      });\n      \n      // Set up audio analysis for silence detection\n      audioContextRef.current = new AudioContext();\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n      source.connect(analyserRef.current);\n      \n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      \n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(chunksRef.current, { type: 'audio/webm;codecs=opus' });\n        onRecordingComplete(audioBlob);\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Cleanup audio analysis\n        if (audioContextRef.current) {\n          audioContextRef.current.close();\n          audioContextRef.current = null;\n        }\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n          animationFrameRef.current = null;\n        }\n      };\n      \n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n      \n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n      \n      // Start silence detection\n      detectSilence();\n      \n    } catch (error) {\n      console.error('Error starting recording:', error);\n      alert('Unable to access microphone. Please check your permissions.');\n    }\n  }, [onRecordingComplete, detectSilence]);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      // Clear all timers\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      if (silenceTimerRef.current) {\n        clearTimeout(silenceTimerRef.current);\n        silenceTimerRef.current = null;\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    }\n  }, [isRecording]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"audio-recorder\">\n      <div className=\"recording-status\">\n        {isRecording && (\n          <div className=\"recording-indicator\">\n            <div className=\"pulse-dot\"></div>\n            <span>Recording... {formatTime(recordingTime)}</span>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"recording-controls\">\n        {!isRecording ? (\n          <button \n            className=\"record-button start\"\n            onClick={startRecording}\n            disabled={isProcessing}\n          >\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <circle cx=\"12\" cy=\"12\" r=\"8\"/>\n            </svg>\n            {isProcessing ? 'Processing...' : 'Start Recording'}\n          </button>\n        ) : (\n          <button \n            className=\"record-button stop\"\n            onClick={stopRecording}\n          >\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <rect x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\"/>\n            </svg>\n            Stop Recording\n          </button>\n        )}\n      </div>\n      \n      <p className=\"recording-hint\">\n        {!isRecording && !isProcessing && \"Press the button and share what's on your mind. You're not alone.\"}\n        {isProcessing && \"Processing your message with care...\"}\n      </p>\n    </div>\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}