{"ast":null,"code":"export class TextToSpeechService{static async convertTextToSpeech(text){try{console.log('Converting text to speech:',text);// URL encode the text parameter\nconst encodedText=encodeURIComponent(text);const url=`${this.API_BASE_URL}/api/text-to-speech?text=${encodedText}`;const response=await fetch(url,{method:'GET',headers:{'Accept':'audio/*'}});if(!response.ok){throw new Error(`TTS API request failed: ${response.status} ${response.statusText}`);}// Get the audio data as blob\nconst audioBlob=await response.blob();console.log('TTS conversion successful, audio blob size:',audioBlob.size);return{success:true,audioBlob:audioBlob};}catch(error){console.error('Text-to-speech conversion failed:',error);return{success:false,error:error instanceof Error?error.message:'Unknown TTS error'};}}static async playAudio(audioBlob){return new Promise((resolve,reject)=>{try{// Create audio URL from blob\nconst audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);audio.onended=()=>{// Clean up the object URL\nURL.revokeObjectURL(audioUrl);resolve();};audio.onerror=error=>{console.error('Audio playback error:',error);URL.revokeObjectURL(audioUrl);reject(new Error('Audio playback failed'));};// Start playing\naudio.play().catch(reject);}catch(error){console.error('Failed to create audio from blob:',error);reject(error);}});}static async convertAndPlay(text){const result=await this.convertTextToSpeech(text);if(result.success&&result.audioBlob){await this.playAudio(result.audioBlob);}else{throw new Error(result.error||'TTS conversion failed');}}}TextToSpeechService.API_BASE_URL='http://localhost:8080';","map":{"version":3,"names":["TextToSpeechService","convertTextToSpeech","text","console","log","encodedText","encodeURIComponent","url","API_BASE_URL","response","fetch","method","headers","ok","Error","status","statusText","audioBlob","blob","size","success","error","message","playAudio","Promise","resolve","reject","audioUrl","URL","createObjectURL","audio","Audio","onended","revokeObjectURL","onerror","play","catch","convertAndPlay","result"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/services/textToSpeechService.ts"],"sourcesContent":["export interface TTSResponse {\n  success: boolean;\n  audioBlob?: Blob;\n  error?: string;\n}\n\nexport class TextToSpeechService {\n  private static readonly API_BASE_URL = 'http://localhost:8080';\n\n  static async convertTextToSpeech(text: string): Promise<TTSResponse> {\n    try {\n      console.log('Converting text to speech:', text);\n      \n      // URL encode the text parameter\n      const encodedText = encodeURIComponent(text);\n      const url = `${this.API_BASE_URL}/api/text-to-speech?text=${encodedText}`;\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'audio/*',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`TTS API request failed: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the audio data as blob\n      const audioBlob = await response.blob();\n      \n      console.log('TTS conversion successful, audio blob size:', audioBlob.size);\n      \n      return {\n        success: true,\n        audioBlob: audioBlob,\n      };\n      \n    } catch (error) {\n      console.error('Text-to-speech conversion failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown TTS error',\n      };\n    }\n  }\n\n  static async playAudio(audioBlob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Create audio URL from blob\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        \n        audio.onended = () => {\n          // Clean up the object URL\n          URL.revokeObjectURL(audioUrl);\n          resolve();\n        };\n        \n        audio.onerror = (error) => {\n          console.error('Audio playback error:', error);\n          URL.revokeObjectURL(audioUrl);\n          reject(new Error('Audio playback failed'));\n        };\n        \n        // Start playing\n        audio.play().catch(reject);\n        \n      } catch (error) {\n        console.error('Failed to create audio from blob:', error);\n        reject(error);\n      }\n    });\n  }\n\n  static async convertAndPlay(text: string): Promise<void> {\n    const result = await this.convertTextToSpeech(text);\n    \n    if (result.success && result.audioBlob) {\n      await this.playAudio(result.audioBlob);\n    } else {\n      throw new Error(result.error || 'TTS conversion failed');\n    }\n  }\n}"],"mappings":"AAMA,MAAO,MAAM,CAAAA,mBAAoB,CAG/B,YAAa,CAAAC,mBAAmBA,CAACC,IAAY,CAAwB,CACnE,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEF,IAAI,CAAC,CAE/C;AACA,KAAM,CAAAG,WAAW,CAAGC,kBAAkB,CAACJ,IAAI,CAAC,CAC5C,KAAM,CAAAK,GAAG,CAAG,GAAG,IAAI,CAACC,YAAY,4BAA4BH,WAAW,EAAE,CAEzE,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,GAAG,CAAE,CAChCI,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,SACZ,CACF,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,2BAA2BL,QAAQ,CAACM,MAAM,IAAIN,QAAQ,CAACO,UAAU,EAAE,CAAC,CACtF,CAEA;AACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAEvCf,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAEa,SAAS,CAACE,IAAI,CAAC,CAE1E,MAAO,CACLC,OAAO,CAAE,IAAI,CACbH,SAAS,CAAEA,SACb,CAAC,CAEH,CAAE,MAAOI,KAAK,CAAE,CACdlB,OAAO,CAACkB,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,KAAK,CAAEA,KAAK,WAAY,CAAAP,KAAK,CAAGO,KAAK,CAACC,OAAO,CAAG,mBAClD,CAAC,CACH,CACF,CAEA,YAAa,CAAAC,SAASA,CAACN,SAAe,CAAiB,CACrD,MAAO,IAAI,CAAAO,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAGC,GAAG,CAACC,eAAe,CAACZ,SAAS,CAAC,CAC/C,KAAM,CAAAa,KAAK,CAAG,GAAI,CAAAC,KAAK,CAACJ,QAAQ,CAAC,CAEjCG,KAAK,CAACE,OAAO,CAAG,IAAM,CACpB;AACAJ,GAAG,CAACK,eAAe,CAACN,QAAQ,CAAC,CAC7BF,OAAO,CAAC,CAAC,CACX,CAAC,CAEDK,KAAK,CAACI,OAAO,CAAIb,KAAK,EAAK,CACzBlB,OAAO,CAACkB,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7CO,GAAG,CAACK,eAAe,CAACN,QAAQ,CAAC,CAC7BD,MAAM,CAAC,GAAI,CAAAZ,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAC5C,CAAC,CAED;AACAgB,KAAK,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAACV,MAAM,CAAC,CAE5B,CAAE,MAAOL,KAAK,CAAE,CACdlB,OAAO,CAACkB,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzDK,MAAM,CAACL,KAAK,CAAC,CACf,CACF,CAAC,CAAC,CACJ,CAEA,YAAa,CAAAgB,cAAcA,CAACnC,IAAY,CAAiB,CACvD,KAAM,CAAAoC,MAAM,CAAG,KAAM,KAAI,CAACrC,mBAAmB,CAACC,IAAI,CAAC,CAEnD,GAAIoC,MAAM,CAAClB,OAAO,EAAIkB,MAAM,CAACrB,SAAS,CAAE,CACtC,KAAM,KAAI,CAACM,SAAS,CAACe,MAAM,CAACrB,SAAS,CAAC,CACxC,CAAC,IAAM,CACL,KAAM,IAAI,CAAAH,KAAK,CAACwB,MAAM,CAACjB,KAAK,EAAI,uBAAuB,CAAC,CAC1D,CACF,CACF,CA/EarB,mBAAmB,CACNQ,YAAY,CAAG,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}