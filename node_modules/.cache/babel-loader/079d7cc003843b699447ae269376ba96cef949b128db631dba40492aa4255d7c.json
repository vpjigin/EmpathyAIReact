{"ast":null,"code":"import React,{useState}from'react';import'./App.css';import AudioRecorder from'./components/AudioRecorder';import AudioPlayer from'./components/AudioPlayer';import TranscriptionHistory from'./components/TranscriptionHistory';import{AudioService}from'./services/audioService';// Generate UUID function\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const generateUUID=()=>{return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){const r=Math.random()*16|0;const v=c==='x'?r:r&0x3|0x8;return v.toString(16);});};function App(){const[isProcessing,setIsProcessing]=useState(false);const[currentResponse,setCurrentResponse]=useState(null);const[error,setError]=useState(null);const[conversations,setConversations]=useState([]);const[currentConversationUuid,setCurrentConversationUuid]=useState(null);const handleRecordingComplete=async audioBlob=>{if(!currentConversationUuid)return;setIsProcessing(true);setError(null);setCurrentResponse(null);try{const response=await AudioService.sendAudioToServer(audioBlob,currentConversationUuid);if(response.success){setCurrentResponse(response);}else{setError(response.error||'Failed to process audio');}}catch(err){setError(err.message||'An unexpected error occurred');}finally{setIsProcessing(false);}};const handlePauseRecording=async audioBlob=>{if(!currentConversationUuid){setError('No active conversation');return;}// First, add the user message immediately (before API call)\nconst timestamp=new Date();const tempUserMessage={id:Date.now().toString(),timestamp,type:'user',content:'Processing your message...',filename:'recording.webm'};// Add user message to show it's being processed\nsetConversations(prev=>{const updatedConversations=[...prev];if(updatedConversations.length>0){const currentMessages=[...updatedConversations[0].messages,tempUserMessage];updatedConversations[0]={...updatedConversations[0],messages:currentMessages};}return updatedConversations;});setIsProcessing(true);setError(null);setCurrentResponse(null);try{const response=await AudioService.sendAudioToServer(audioBlob,currentConversationUuid);if(response.success&&response.transcription&&response.transcriptionReply){setCurrentResponse(response);// Update the user message with actual transcription and add AI reply\nconst actualUserMessage={id:tempUserMessage.id,timestamp,type:'user',content:response.transcription,filename:response.filename};const aiMessage={id:(Date.now()+1).toString(),timestamp:new Date(timestamp.getTime()+100),type:'ai',content:response.transcriptionReply,needHumanIntervention:response.needHumanIntervention||false};setConversations(prev=>{const updatedConversations=[...prev];if(updatedConversations.length>0){// Replace the temp user message and add AI response\nconst currentMessages=[...updatedConversations[0].messages];const lastMessageIndex=currentMessages.length-1;currentMessages[lastMessageIndex]=actualUserMessage;currentMessages.push(aiMessage);updatedConversations[0]={...updatedConversations[0],messages:currentMessages};}return updatedConversations;});}else{// Remove the temp user message if there was an error\nsetConversations(prev=>{const updatedConversations=[...prev];if(updatedConversations.length>0){const currentMessages=[...updatedConversations[0].messages];currentMessages.pop();// Remove temp message\nupdatedConversations[0]={...updatedConversations[0],messages:currentMessages};}return updatedConversations;});setError(response.error||'Failed to process audio');}}catch(err){// Remove the temp user message if there was an error\nsetConversations(prev=>{const updatedConversations=[...prev];if(updatedConversations.length>0){const currentMessages=[...updatedConversations[0].messages];currentMessages.pop();// Remove temp message\nupdatedConversations[0]={...updatedConversations[0],messages:currentMessages};}return updatedConversations;});setError(err.message||'An unexpected error occurred');}finally{setIsProcessing(false);}};const handleStartNewConversation=()=>{const uuid=generateUUID();setCurrentConversationUuid(uuid);// Create new conversation\nconst newConversation={id:uuid,messages:[],startTime:new Date()};setConversations(prev=>[newConversation,...prev]);console.log('Started new conversation with UUID:',uuid);return uuid;};const handleEndConversation=()=>{setCurrentConversationUuid(null);console.log('Ended conversation');};const handlePlaybackComplete=()=>{// Optional: Add any cleanup or next steps after audio playback\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Empathy AI\"}),/*#__PURE__*/_jsx(\"p\",{children:\"A safe space to share your thoughts and feelings\"})]}),/*#__PURE__*/_jsxs(\"main\",{className:\"app-main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"support-message\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"You're Not Alone\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This is a judgment-free space where you can express yourself freely. Our AI companion is here to listen with empathy and provide supportive guidance.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"recording-section\",children:[/*#__PURE__*/_jsx(AudioRecorder,{onRecordingComplete:handleRecordingComplete,onPauseRecording:handlePauseRecording,onProcessingComplete:()=>{}// Empty callback as auto-resume is handled internally\n,isProcessing:isProcessing,conversationUuid:currentConversationUuid,onStartNewConversation:handleStartNewConversation,onEndConversation:handleEndConversation}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u26A0\\uFE0F \",error]}),/*#__PURE__*/_jsx(\"small\",{children:\"Please try again or check your connection.\"})]}),currentResponse&&currentResponse.success&&/*#__PURE__*/_jsx(AudioPlayer,{audioUrl:currentResponse.audioUrl||null,message:currentResponse.message,onPlaybackComplete:handlePlaybackComplete})]}),/*#__PURE__*/_jsx(TranscriptionHistory,{conversations:conversations})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","AudioRecorder","AudioPlayer","TranscriptionHistory","AudioService","jsx","_jsx","jsxs","_jsxs","generateUUID","replace","c","r","Math","random","v","toString","App","isProcessing","setIsProcessing","currentResponse","setCurrentResponse","error","setError","conversations","setConversations","currentConversationUuid","setCurrentConversationUuid","handleRecordingComplete","audioBlob","response","sendAudioToServer","success","err","message","handlePauseRecording","timestamp","Date","tempUserMessage","id","now","type","content","filename","prev","updatedConversations","length","currentMessages","messages","transcription","transcriptionReply","actualUserMessage","aiMessage","getTime","needHumanIntervention","lastMessageIndex","push","pop","handleStartNewConversation","uuid","newConversation","startTime","console","log","handleEndConversation","handlePlaybackComplete","className","children","onRecordingComplete","onPauseRecording","onProcessingComplete","conversationUuid","onStartNewConversation","onEndConversation","audioUrl","onPlaybackComplete"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport AudioRecorder from './components/AudioRecorder';\nimport AudioPlayer from './components/AudioPlayer';\nimport TranscriptionHistory, { Conversation, ChatMessage } from './components/TranscriptionHistory';\nimport { AudioService, AudioResponse } from './services/audioService';\n\n// Generate UUID function\nconst generateUUID = (): string => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n\nfunction App() {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState<AudioResponse | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversationUuid, setCurrentConversationUuid] = useState<string | null>(null);\n\n  const handleRecordingComplete = async (audioBlob: Blob) => {\n    if (!currentConversationUuid) return;\n\n    setIsProcessing(true);\n    setError(null);\n    setCurrentResponse(null);\n\n    try {\n      const response = await AudioService.sendAudioToServer(audioBlob, currentConversationUuid);\n      \n      if (response.success) {\n        setCurrentResponse(response);\n      } else {\n        setError(response.error || 'Failed to process audio');\n      }\n    } catch (err: any) {\n      setError(err.message || 'An unexpected error occurred');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handlePauseRecording = async (audioBlob: Blob) => {\n    if (!currentConversationUuid) {\n      setError('No active conversation');\n      return;\n    }\n\n    // First, add the user message immediately (before API call)\n    const timestamp = new Date();\n    const tempUserMessage: ChatMessage = {\n      id: Date.now().toString(),\n      timestamp,\n      type: 'user',\n      content: 'Processing your message...',\n      filename: 'recording.webm',\n    };\n\n    // Add user message to show it's being processed\n    setConversations(prev => {\n      const updatedConversations = [...prev];\n      if (updatedConversations.length > 0) {\n        const currentMessages = [...updatedConversations[0].messages, tempUserMessage];\n        updatedConversations[0] = {\n          ...updatedConversations[0],\n          messages: currentMessages\n        };\n      }\n      return updatedConversations;\n    });\n\n    setIsProcessing(true);\n    setError(null);\n    setCurrentResponse(null);\n\n    try {\n      const response = await AudioService.sendAudioToServer(audioBlob, currentConversationUuid);\n      \n      if (response.success && response.transcription && response.transcriptionReply) {\n        setCurrentResponse(response);\n        \n        // Update the user message with actual transcription and add AI reply\n        const actualUserMessage: ChatMessage = {\n          id: tempUserMessage.id,\n          timestamp,\n          type: 'user',\n          content: response.transcription,\n          filename: response.filename,\n        };\n        \n        const aiMessage: ChatMessage = {\n          id: (Date.now() + 1).toString(),\n          timestamp: new Date(timestamp.getTime() + 100),\n          type: 'ai',\n          content: response.transcriptionReply,\n          needHumanIntervention: response.needHumanIntervention || false,\n        };\n        \n        setConversations(prev => {\n          const updatedConversations = [...prev];\n          if (updatedConversations.length > 0) {\n            // Replace the temp user message and add AI response\n            const currentMessages = [...updatedConversations[0].messages];\n            const lastMessageIndex = currentMessages.length - 1;\n            currentMessages[lastMessageIndex] = actualUserMessage;\n            currentMessages.push(aiMessage);\n            updatedConversations[0] = {\n              ...updatedConversations[0],\n              messages: currentMessages\n            };\n          }\n          return updatedConversations;\n        });\n      } else {\n        // Remove the temp user message if there was an error\n        setConversations(prev => {\n          const updatedConversations = [...prev];\n          if (updatedConversations.length > 0) {\n            const currentMessages = [...updatedConversations[0].messages];\n            currentMessages.pop(); // Remove temp message\n            updatedConversations[0] = {\n              ...updatedConversations[0],\n              messages: currentMessages\n            };\n          }\n          return updatedConversations;\n        });\n        setError(response.error || 'Failed to process audio');\n      }\n    } catch (err: any) {\n      // Remove the temp user message if there was an error\n      setConversations(prev => {\n        const updatedConversations = [...prev];\n        if (updatedConversations.length > 0) {\n          const currentMessages = [...updatedConversations[0].messages];\n          currentMessages.pop(); // Remove temp message\n          updatedConversations[0] = {\n            ...updatedConversations[0],\n            messages: currentMessages\n          };\n        }\n        return updatedConversations;\n      });\n      setError(err.message || 'An unexpected error occurred');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleStartNewConversation = (): string => {\n    const uuid = generateUUID();\n    setCurrentConversationUuid(uuid);\n    \n    // Create new conversation\n    const newConversation: Conversation = {\n      id: uuid,\n      messages: [],\n      startTime: new Date(),\n    };\n    \n    setConversations(prev => [newConversation, ...prev]);\n    console.log('Started new conversation with UUID:', uuid);\n    return uuid;\n  };\n\n  const handleEndConversation = () => {\n    setCurrentConversationUuid(null);\n    console.log('Ended conversation');\n  };\n\n  const handlePlaybackComplete = () => {\n    // Optional: Add any cleanup or next steps after audio playback\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1>Empathy AI</h1>\n        <p>A safe space to share your thoughts and feelings</p>\n      </header>\n\n      <main className=\"app-main\">\n        <div className=\"support-message\">\n          <h2>You're Not Alone</h2>\n          <p>\n            This is a judgment-free space where you can express yourself freely. \n            Our AI companion is here to listen with empathy and provide supportive guidance.\n          </p>\n        </div>\n\n        <div className=\"main-content\">\n          <div className=\"recording-section\">\n            <AudioRecorder \n              onRecordingComplete={handleRecordingComplete}\n              onPauseRecording={handlePauseRecording}\n              onProcessingComplete={() => {}} // Empty callback as auto-resume is handled internally\n              isProcessing={isProcessing}\n              conversationUuid={currentConversationUuid}\n              onStartNewConversation={handleStartNewConversation}\n              onEndConversation={handleEndConversation}\n            />\n\n            {error && (\n              <div className=\"error-message\">\n                <p>⚠️ {error}</p>\n                <small>Please try again or check your connection.</small>\n              </div>\n            )}\n\n            {currentResponse && currentResponse.success && (\n              <AudioPlayer\n                audioUrl={currentResponse.audioUrl || null}\n                message={currentResponse.message}\n                onPlaybackComplete={handlePlaybackComplete}\n              />\n            )}\n          </div>\n\n          <TranscriptionHistory conversations={conversations} />\n        </div>\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}