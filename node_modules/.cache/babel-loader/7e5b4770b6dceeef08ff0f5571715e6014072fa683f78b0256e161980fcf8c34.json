{"ast":null,"code":"export class TextToSpeechService {\n  static async convertTextToSpeech(text) {\n    try {\n      console.log('Converting text to speech:', text);\n\n      // URL encode the text parameter\n      const encodedText = encodeURIComponent(text);\n      const url = `${this.API_BASE_URL}/api/text-to-speech?text=${encodedText}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'audio/*'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`TTS API request failed: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the audio data as blob\n      const audioBlob = await response.blob();\n      console.log('TTS conversion successful, audio blob size:', audioBlob.size);\n      return {\n        success: true,\n        audioBlob: audioBlob\n      };\n    } catch (error) {\n      console.error('Text-to-speech conversion failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown TTS error'\n      };\n    }\n  }\n  static async playAudio(audioBlob) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Create audio URL from blob\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        audio.onended = () => {\n          // Clean up the object URL\n          URL.revokeObjectURL(audioUrl);\n          resolve();\n        };\n        audio.onerror = error => {\n          console.error('Audio playback error:', error);\n          URL.revokeObjectURL(audioUrl);\n          reject(new Error('Audio playback failed'));\n        };\n\n        // Start playing\n        audio.play().catch(reject);\n      } catch (error) {\n        console.error('Failed to create audio from blob:', error);\n        reject(error);\n      }\n    });\n  }\n  static async convertAndPlay(text) {\n    const result = await this.convertTextToSpeech(text);\n    if (result.success && result.audioBlob) {\n      await this.playAudio(result.audioBlob);\n    } else {\n      throw new Error(result.error || 'TTS conversion failed');\n    }\n  }\n}\nTextToSpeechService.API_BASE_URL = 'http://localhost:8080';\nTextToSpeechService.currentAudio = null;\nTextToSpeechService.currentAudioUrl = null;","map":{"version":3,"names":["TextToSpeechService","convertTextToSpeech","text","console","log","encodedText","encodeURIComponent","url","API_BASE_URL","response","fetch","method","headers","ok","Error","status","statusText","audioBlob","blob","size","success","error","message","playAudio","Promise","resolve","reject","audioUrl","URL","createObjectURL","audio","Audio","onended","revokeObjectURL","onerror","play","catch","convertAndPlay","result","currentAudio","currentAudioUrl"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/services/textToSpeechService.ts"],"sourcesContent":["export interface TTSResponse {\n  success: boolean;\n  audioBlob?: Blob;\n  error?: string;\n}\n\nexport class TextToSpeechService {\n  private static readonly API_BASE_URL = 'http://localhost:8080';\n  private static currentAudio: HTMLAudioElement | null = null;\n  private static currentAudioUrl: string | null = null;\n\n  static async convertTextToSpeech(text: string): Promise<TTSResponse> {\n    try {\n      console.log('Converting text to speech:', text);\n      \n      // URL encode the text parameter\n      const encodedText = encodeURIComponent(text);\n      const url = `${this.API_BASE_URL}/api/text-to-speech?text=${encodedText}`;\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'audio/*',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`TTS API request failed: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the audio data as blob\n      const audioBlob = await response.blob();\n      \n      console.log('TTS conversion successful, audio blob size:', audioBlob.size);\n      \n      return {\n        success: true,\n        audioBlob: audioBlob,\n      };\n      \n    } catch (error) {\n      console.error('Text-to-speech conversion failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown TTS error',\n      };\n    }\n  }\n\n  static async playAudio(audioBlob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Create audio URL from blob\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        \n        audio.onended = () => {\n          // Clean up the object URL\n          URL.revokeObjectURL(audioUrl);\n          resolve();\n        };\n        \n        audio.onerror = (error) => {\n          console.error('Audio playback error:', error);\n          URL.revokeObjectURL(audioUrl);\n          reject(new Error('Audio playback failed'));\n        };\n        \n        // Start playing\n        audio.play().catch(reject);\n        \n      } catch (error) {\n        console.error('Failed to create audio from blob:', error);\n        reject(error);\n      }\n    });\n  }\n\n  static async convertAndPlay(text: string): Promise<void> {\n    const result = await this.convertTextToSpeech(text);\n    \n    if (result.success && result.audioBlob) {\n      await this.playAudio(result.audioBlob);\n    } else {\n      throw new Error(result.error || 'TTS conversion failed');\n    }\n  }\n}"],"mappings":"AAMA,OAAO,MAAMA,mBAAmB,CAAC;EAK/B,aAAaC,mBAAmBA,CAACC,IAAY,EAAwB;IACnE,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,IAAI,CAAC;;MAE/C;MACA,MAAMG,WAAW,GAAGC,kBAAkB,CAACJ,IAAI,CAAC;MAC5C,MAAMK,GAAG,GAAG,GAAG,IAAI,CAACC,YAAY,4BAA4BH,WAAW,EAAE;MAEzE,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;QAChCI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BL,QAAQ,CAACM,MAAM,IAAIN,QAAQ,CAACO,UAAU,EAAE,CAAC;MACtF;;MAEA;MACA,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAEvCf,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEa,SAAS,CAACE,IAAI,CAAC;MAE1E,OAAO;QACLC,OAAO,EAAE,IAAI;QACbH,SAAS,EAAEA;MACb,CAAC;IAEH,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO;QACLD,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEA,KAAK,YAAYP,KAAK,GAAGO,KAAK,CAACC,OAAO,GAAG;MAClD,CAAC;IACH;EACF;EAEA,aAAaC,SAASA,CAACN,SAAe,EAAiB;IACrD,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACZ,SAAS,CAAC;QAC/C,MAAMa,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAAC;QAEjCG,KAAK,CAACE,OAAO,GAAG,MAAM;UACpB;UACAJ,GAAG,CAACK,eAAe,CAACN,QAAQ,CAAC;UAC7BF,OAAO,CAAC,CAAC;QACX,CAAC;QAEDK,KAAK,CAACI,OAAO,GAAIb,KAAK,IAAK;UACzBlB,OAAO,CAACkB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;UAC7CO,GAAG,CAACK,eAAe,CAACN,QAAQ,CAAC;UAC7BD,MAAM,CAAC,IAAIZ,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5C,CAAC;;QAED;QACAgB,KAAK,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAACV,MAAM,CAAC;MAE5B,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzDK,MAAM,CAACL,KAAK,CAAC;MACf;IACF,CAAC,CAAC;EACJ;EAEA,aAAagB,cAAcA,CAACnC,IAAY,EAAiB;IACvD,MAAMoC,MAAM,GAAG,MAAM,IAAI,CAACrC,mBAAmB,CAACC,IAAI,CAAC;IAEnD,IAAIoC,MAAM,CAAClB,OAAO,IAAIkB,MAAM,CAACrB,SAAS,EAAE;MACtC,MAAM,IAAI,CAACM,SAAS,CAACe,MAAM,CAACrB,SAAS,CAAC;IACxC,CAAC,MAAM;MACL,MAAM,IAAIH,KAAK,CAACwB,MAAM,CAACjB,KAAK,IAAI,uBAAuB,CAAC;IAC1D;EACF;AACF;AAjFarB,mBAAmB,CACNQ,YAAY,GAAG,uBAAuB;AADnDR,mBAAmB,CAEfuC,YAAY,GAA4B,IAAI;AAFhDvC,mBAAmB,CAGfwC,eAAe,GAAkB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}