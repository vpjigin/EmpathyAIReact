{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import AudioRecorder from'./components/AudioRecorder';import AudioPlayer from'./components/AudioPlayer';import TranscriptionHistory from'./components/TranscriptionHistory';import HelplinePopup from'./components/HelplinePopup';import{TextToSpeechService}from'./services/textToSpeechService';// Generate UUID function\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const generateUUID=()=>{return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){const r=Math.random()*16|0;const v=c==='x'?r:r&0x3|0x8;return v.toString(16);});};function App(){const[isProcessing]=useState(false);const[currentResponse]=useState(null);const[error,setError]=useState(null);const[conversations,setConversations]=useState([]);const[currentConversationUuid,setCurrentConversationUuid]=useState(null);const[showHelplinePopup,setShowHelplinePopup]=useState(false);const handleRecordingComplete=async audioBlob=>{// This is now handled by WebSocket, keeping for compatibility\nconsole.log('Recording complete - WebSocket mode');};const handleWebSocketMessage=async message=>{console.log('Received WebSocket message:',message);if(message.type==='transcript'&&message.transcript&&message.reply){// Add user message with transcript\nconst userMessage={id:Date.now().toString(),timestamp:new Date(),type:'user',content:message.transcript};// Add AI response message\nconst aiMessage={id:(Date.now()+1).toString(),timestamp:new Date(Date.now()+100),type:'ai',content:message.reply,needHumanIntervention:message.needsHumanIntervention||false};setConversations(prev=>{const updatedConversations=[...prev];if(updatedConversations.length>0){const currentMessages=[...updatedConversations[0].messages,userMessage,aiMessage];updatedConversations[0]={...updatedConversations[0],messages:currentMessages};}return updatedConversations;});// Check if human intervention is needed and show popup\nif(message.needsHumanIntervention){console.log('Human intervention needed - showing helpline popup');setShowHelplinePopup(true);}// Convert AI reply to speech and play it (this will automatically stop any current audio)\ntry{console.log('Converting AI reply to speech:',message.reply);console.log('Previous audio will be stopped if playing');await TextToSpeechService.convertAndPlay(message.reply);console.log('TTS playback completed');}catch(ttsError){console.error('TTS failed:',ttsError);// Don't show TTS errors to user as they're not critical\n}}if(message.error){setError(message.error);}};const handleWebSocketError=error=>{console.error('WebSocket error:',error);setError(error);};const handleStartNewConversation=()=>{const uuid=generateUUID();setCurrentConversationUuid(uuid);// Create new conversation\nconst newConversation={id:uuid,messages:[],startTime:new Date()};setConversations(prev=>[newConversation,...prev]);console.log('Started new conversation with UUID:',uuid);return uuid;};const handleEndConversation=()=>{setCurrentConversationUuid(null);// Stop any playing TTS audio when conversation ends\nTextToSpeechService.stopCurrentAudio();console.log('Ended conversation and stopped any playing audio');};const handleCloseHelplinePopup=()=>{setShowHelplinePopup(false);};const handlePlaybackComplete=()=>{// Optional: Add any cleanup or next steps after audio playback\n};// Cleanup effect to stop any playing audio when component unmounts\nuseEffect(()=>{return()=>{TextToSpeechService.stopCurrentAudio();console.log('App unmounting - stopped any playing audio');};},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Empathy AI\"}),/*#__PURE__*/_jsx(\"p\",{children:\"A safe space to share your thoughts and feelings\"})]}),/*#__PURE__*/_jsxs(\"main\",{className:\"app-main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"support-message\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"You're Not Alone\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This is a judgment-free space where you can express yourself freely. Our AI companion is here to listen with empathy and provide supportive guidance.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"recording-section\",children:[/*#__PURE__*/_jsx(AudioRecorder,{onRecordingComplete:handleRecordingComplete,onProcessingComplete:()=>{}// Empty callback as auto-resume is handled internally\n,isProcessing:isProcessing,conversationUuid:currentConversationUuid,onStartNewConversation:handleStartNewConversation,onEndConversation:handleEndConversation,onWebSocketMessage:handleWebSocketMessage,onWebSocketError:handleWebSocketError}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u26A0\\uFE0F \",error]}),/*#__PURE__*/_jsx(\"small\",{children:\"Please try again or check your connection.\"})]}),currentResponse&&currentResponse.success&&/*#__PURE__*/_jsx(AudioPlayer,{audioUrl:currentResponse.audioUrl||null,message:currentResponse.message,onPlaybackComplete:handlePlaybackComplete})]}),/*#__PURE__*/_jsx(TranscriptionHistory,{conversations:conversations})]})]}),/*#__PURE__*/_jsx(HelplinePopup,{isOpen:showHelplinePopup,onClose:handleCloseHelplinePopup})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","AudioRecorder","AudioPlayer","TranscriptionHistory","HelplinePopup","TextToSpeechService","jsx","_jsx","jsxs","_jsxs","generateUUID","replace","c","r","Math","random","v","toString","App","isProcessing","currentResponse","error","setError","conversations","setConversations","currentConversationUuid","setCurrentConversationUuid","showHelplinePopup","setShowHelplinePopup","handleRecordingComplete","audioBlob","console","log","handleWebSocketMessage","message","type","transcript","reply","userMessage","id","Date","now","timestamp","content","aiMessage","needHumanIntervention","needsHumanIntervention","prev","updatedConversations","length","currentMessages","messages","convertAndPlay","ttsError","handleWebSocketError","handleStartNewConversation","uuid","newConversation","startTime","handleEndConversation","stopCurrentAudio","handleCloseHelplinePopup","handlePlaybackComplete","className","children","onRecordingComplete","onProcessingComplete","conversationUuid","onStartNewConversation","onEndConversation","onWebSocketMessage","onWebSocketError","success","audioUrl","onPlaybackComplete","isOpen","onClose"],"sources":["/Users/jiginvp/react/AICompetition/empathy-ai/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AudioRecorder from './components/AudioRecorder';\nimport AudioPlayer from './components/AudioPlayer';\nimport TranscriptionHistory, { Conversation, ChatMessage } from './components/TranscriptionHistory';\nimport HelplinePopup from './components/HelplinePopup';\nimport { WebSocketMessage } from './services/webSocketService';\nimport { TextToSpeechService } from './services/textToSpeechService';\n\n// Generate UUID function\nconst generateUUID = (): string => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n\nfunction App() {\n  const [isProcessing] = useState(false);\n  const [currentResponse] = useState<any | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversationUuid, setCurrentConversationUuid] = useState<string | null>(null);\n  const [showHelplinePopup, setShowHelplinePopup] = useState<boolean>(false);\n\n  const handleRecordingComplete = async (audioBlob: Blob) => {\n    // This is now handled by WebSocket, keeping for compatibility\n    console.log('Recording complete - WebSocket mode');\n  };\n\n  const handleWebSocketMessage = async (message: WebSocketMessage) => {\n    console.log('Received WebSocket message:', message);\n    \n    if (message.type === 'transcript' && message.transcript && message.reply) {\n      // Add user message with transcript\n      const userMessage: ChatMessage = {\n        id: Date.now().toString(),\n        timestamp: new Date(),\n        type: 'user',\n        content: message.transcript,\n      };\n      \n      // Add AI response message\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        timestamp: new Date(Date.now() + 100),\n        type: 'ai',\n        content: message.reply,\n        needHumanIntervention: message.needsHumanIntervention || false,\n      };\n      \n      setConversations(prev => {\n        const updatedConversations = [...prev];\n        if (updatedConversations.length > 0) {\n          const currentMessages = [...updatedConversations[0].messages, userMessage, aiMessage];\n          updatedConversations[0] = {\n            ...updatedConversations[0],\n            messages: currentMessages\n          };\n        }\n        return updatedConversations;\n      });\n\n      // Check if human intervention is needed and show popup\n      if (message.needsHumanIntervention) {\n        console.log('Human intervention needed - showing helpline popup');\n        setShowHelplinePopup(true);\n      }\n\n      // Convert AI reply to speech and play it (this will automatically stop any current audio)\n      try {\n        console.log('Converting AI reply to speech:', message.reply);\n        console.log('Previous audio will be stopped if playing');\n        await TextToSpeechService.convertAndPlay(message.reply);\n        console.log('TTS playback completed');\n      } catch (ttsError) {\n        console.error('TTS failed:', ttsError);\n        // Don't show TTS errors to user as they're not critical\n      }\n    }\n    \n    if (message.error) {\n      setError(message.error);\n    }\n  };\n  \n  const handleWebSocketError = (error: string) => {\n    console.error('WebSocket error:', error);\n    setError(error);\n  };\n\n  const handleStartNewConversation = (): string => {\n    const uuid = generateUUID();\n    setCurrentConversationUuid(uuid);\n    \n    // Create new conversation\n    const newConversation: Conversation = {\n      id: uuid,\n      messages: [],\n      startTime: new Date(),\n    };\n    \n    setConversations(prev => [newConversation, ...prev]);\n    console.log('Started new conversation with UUID:', uuid);\n    return uuid;\n  };\n\n  const handleEndConversation = () => {\n    setCurrentConversationUuid(null);\n    // Stop any playing TTS audio when conversation ends\n    TextToSpeechService.stopCurrentAudio();\n    console.log('Ended conversation and stopped any playing audio');\n  };\n\n  const handleCloseHelplinePopup = () => {\n    setShowHelplinePopup(false);\n  };\n\n  const handlePlaybackComplete = () => {\n    // Optional: Add any cleanup or next steps after audio playback\n  };\n\n  // Cleanup effect to stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      TextToSpeechService.stopCurrentAudio();\n      console.log('App unmounting - stopped any playing audio');\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1>Empathy AI</h1>\n        <p>A safe space to share your thoughts and feelings</p>\n      </header>\n\n      <main className=\"app-main\">\n        <div className=\"support-message\">\n          <h2>You're Not Alone</h2>\n          <p>\n            This is a judgment-free space where you can express yourself freely. \n            Our AI companion is here to listen with empathy and provide supportive guidance.\n          </p>\n        </div>\n\n        <div className=\"main-content\">\n          <div className=\"recording-section\">\n            <AudioRecorder \n              onRecordingComplete={handleRecordingComplete}\n              onProcessingComplete={() => {}} // Empty callback as auto-resume is handled internally\n              isProcessing={isProcessing}\n              conversationUuid={currentConversationUuid}\n              onStartNewConversation={handleStartNewConversation}\n              onEndConversation={handleEndConversation}\n              onWebSocketMessage={handleWebSocketMessage}\n              onWebSocketError={handleWebSocketError}\n            />\n\n            {error && (\n              <div className=\"error-message\">\n                <p>⚠️ {error}</p>\n                <small>Please try again or check your connection.</small>\n              </div>\n            )}\n\n            {currentResponse && currentResponse.success && (\n              <AudioPlayer\n                audioUrl={currentResponse.audioUrl || null}\n                message={currentResponse.message}\n                onPlaybackComplete={handlePlaybackComplete}\n              />\n            )}\n          </div>\n\n          <TranscriptionHistory conversations={conversations} />\n        </div>\n\n      </main>\n\n      <HelplinePopup \n        isOpen={showHelplinePopup} \n        onClose={handleCloseHelplinePopup} \n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}